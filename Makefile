# Makefile –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Tochka
.PHONY: help setup generate clean build test lint format install bootstrap

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PROJECT_NAME = Tochka
SCHEME = Tochka
WORKSPACE = $(PROJECT_NAME).xcworkspace

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
YELLOW = \033[1;33m
GREEN = \033[1;32m
RED = \033[1;31m
NC = \033[0m # No Color

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
	@echo "$(YELLOW)–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ $(PROJECT_NAME):$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-20s$(NC) %s\n", $$1, $$2}'

setup: ## –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)
	@echo "$(YELLOW)üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ Tochka...$(NC)"
	@make install
	@make bootstrap
	@make generate
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'make open' –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è$(NC)"

install: ## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (Tuist, SwiftLint)
	@echo "$(YELLOW)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	@if ! command -v tuist &> /dev/null; then \
		echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Tuist..."; \
		brew tap tuist/tuist && brew install tuist; \
	else \
		echo "Tuist —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; \
	fi
	@if ! command -v swiftlint &> /dev/null; then \
		echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ SwiftLint..."; \
		brew install swiftlint; \
	else \
		echo "SwiftLint —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; \
	fi
	@if ! command -v swiftformat &> /dev/null; then \
		echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ SwiftFormat..."; \
		brew install swiftformat; \
	else \
		echo "SwiftFormat —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; \
	fi

bootstrap: ## –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(YELLOW)üì¶ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	tuist install

generate: ## –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Xcode –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(YELLOW)üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Xcode –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	tuist generate

clean: ## –û—á–∏—Å—Ç–∫–∞ build –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	tuist clean
	rm -rf build/
	rm -rf DerivedData/
	rm -rf .build/

build: ## –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(YELLOW)üî® –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	xcodebuild -workspace $(WORKSPACE) -scheme $(SCHEME) -configuration Debug clean build

build-release: ## –°–±–æ—Ä–∫–∞ —Ä–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ä—Å–∏–∏
	@echo "$(YELLOW)üî® –°–±–æ—Ä–∫–∞ —Ä–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ä—Å–∏–∏...$(NC)"
	xcodebuild -workspace $(WORKSPACE) -scheme $(SCHEME) -configuration Release clean build

test: ## –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	xcodebuild test -workspace $(WORKSPACE) -scheme $(SCHEME) -destination 'platform=iOS Simulator,name=iPhone 16 PRO,OS=latest'

test-unit: ## –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —é–Ω–∏—Ç —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üß™ –ó–∞–ø—É—Å–∫ —é–Ω–∏—Ç —Ç–µ—Å—Ç–æ–≤...$(NC)"
	xcodebuild test -workspace $(WORKSPACE) -scheme Core -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest'

lint: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞
	@echo "$(YELLOW)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞...$(NC)"
	swiftlint lint --strict

lint-autocorrect: ## –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∫–æ–¥–∞
	@echo "$(YELLOW)üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è...$(NC)"
	swiftlint lint --autocorrect

format: ## –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
	@echo "$(YELLOW)‚ú® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...$(NC)"
	swiftformat .

open: ## –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç –≤ Xcode
	@if [ -e $(WORKSPACE) ]; then \
		open $(WORKSPACE); \
	else \
		echo "$(RED)‚ùå Workspace –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'make generate'$(NC)"; \
	fi

status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(YELLOW)üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:$(NC)"
	@echo "Project: $(GREEN)$(PROJECT_NAME)$(NC)"
	@echo "Workspace: $(if $(wildcard $(WORKSPACE)),$(GREEN)‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç$(NC),$(RED)‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω$(NC))"
	@echo "Tuist: $(if $(shell command -v tuist),$(GREEN)‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC),$(RED)‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC))"
	@echo "SwiftLint: $(if $(shell command -v swiftlint),$(GREEN)‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC),$(RED)‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC))"
	@echo "SwiftFormat: $(if $(shell command -v swiftformat),$(GREEN)‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC),$(RED)‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC))"

update: ## –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	@echo "$(YELLOW)üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	tuist install --update
	tuist generate

reset: ## –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(YELLOW)üîÑ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	@make clean
	@make bootstrap
	@make generate
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–±—Ä–æ—à–µ–Ω –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω$(NC)"

graph: ## –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	@echo "$(YELLOW)üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	tuist graph

edit: ## –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Tuist
	tuist edit

# –ê–ª–∏–∞—Å—ã –¥–ª—è —á–∞—Å—Ç—ã—Ö –∫–æ–º–∞–Ω–¥
g: generate ## –ê–ª–∏–∞—Å –¥–ª—è generate
b: build ## –ê–ª–∏–∞—Å –¥–ª—è build
t: test ## –ê–ª–∏–∞—Å –¥–ª—è test
l: lint ## –ê–ª–∏–∞—Å –¥–ª—è lint
o: open ## –ê–ª–∏–∞—Å –¥–ª—è open

# Firebase –∫–æ–º–∞–Ω–¥—ã
firebase-setup: ## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firebase Emulator
	@echo "$(YELLOW)üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firebase Emulator...$(NC)"
	@if ! command -v firebase &> /dev/null; then \
		echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Firebase CLI..."; \
		npm install -g firebase-tools; \
	fi
	firebase login
	firebase init emulators

firebase-start: ## –ó–∞–ø—É—Å–∫ Firebase Emulator
	@echo "$(YELLOW)üî• –ó–∞–ø—É—Å–∫ Firebase Emulator...$(NC)"
	firebase emulators:start

# Git —Ö—É–∫–∏
install-hooks: ## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ git —Ö—É–∫–æ–≤
	@echo "$(YELLOW)ü™ù –£—Å—Ç–∞–Ω–æ–≤–∫–∞ git —Ö—É–∫–æ–≤...$(NC)"
	cp scripts/pre-commit .git/hooks/pre-commit
	chmod +x .git/hooks/pre-commit
	@echo "$(GREEN)‚úÖ Git —Ö—É–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è CI/CD
ci-setup: ## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è CI/CD
	@make install
	@make bootstrap

ci-test: ## –¢–µ—Å—Ç—ã –¥–ª—è CI/CD
	@make lint
	@make test

ci-build: ## –°–±–æ—Ä–∫–∞ –¥–ª—è CI/CD
	@make build-release
