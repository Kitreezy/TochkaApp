import Foundation
import Combine
import MapKit
import CoreLocation
import SwiftUI
import Core

@MainActor
public class MapViewModel: BaseViewModel {
    // MARK: - Published Properties
    
    // –ö–∞—Ä—Ç–∞ –∏ –ª–æ–∫–∞—Ü–∏—è
    @Published public var mapRegion = MKCoordinateRegion(
        center: .rostovOnDon,
        latitudinalMeters: 10000,
        longitudinalMeters: 10000
    )
    @Published public var mapType: MKMapType = .standard
    @Published public var userLocation: CLLocationCoordinate2D?
    
    // –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    @Published public var searchText = ""
    @Published public var selectedCategory: PlaceCategory = .all
    @Published public var places: [Place] = []
    @Published public var selectedPlace: Place?
    
    // UI —Å–æ—Å—Ç–æ—è–Ω–∏—è
    @Published public var showFilterSheet = false
    @Published public var showPlaceDetail = false
    @Published public var isSearching = false
    
    // MARK: - Private Properties
    private let locationManager = LocationManager.shared
    private let placesService = PlacesService.shared
    private var searchDebounceTimer: Timer?
    
    public override init() {
        super.init()
        setupBindings()
        setupInitialState()
    }
    
    // MARK: - Setup Methods
    
    private func setupBindings() {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        locationManager.$location
            .compactMap { $0?.coordinate }
            .receive(on: DispatchQueue.main)
            .sink { [weak self] location in
                self?.handleLocationUpdate(location)
            }
            .store(in: &cancellables)
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Å—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
        placesService.$places
            .receive(on: DispatchQueue.main)
            .sink { [weak self] places in
                self?.handlePlacesUpdate(places)
            }
            .store(in: &cancellables)
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        placesService.$isLoading
            .receive(on: DispatchQueue.main)
            .assign(to: \.isLoading, on: self)
            .store(in: &cancellables)
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
        placesService.$errorMessage
            .compactMap { $0 }
            .receive(on: DispatchQueue.main)
            .sink { [weak self] error in
                self?.showError(TochkaError.networkError(error))
            }
            .store(in: &cancellables)
        
        // –ò–ó–ú–ï–ù–ò–¢–¨: –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ —Å debounce
        $searchText
            .debounce(for: .milliseconds(500), scheduler: DispatchQueue.main)
            .removeDuplicates()
            .sink { [weak self] query in
                self?.handleSearchTextChange(query)
            }
            .store(in: &cancellables)
        
        // –î–û–ë–ê–í–ò–¢–¨: –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ë–ï–ó debounce
        $selectedCategory
            .removeDuplicates()
            .sink { [weak self] category in
                self?.handleCategoryChangeImmediate(category)
            }
            .store(in: &cancellables)
    }
    
    private func setupInitialState() {
        print("üó∫Ô∏è MapViewModel: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        requestLocationPermission()
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞
        loadNearbyPlaces()
    }
    
    // MARK: - Public Methods
    
    public func requestLocationPermission() {
        print("üìç MapViewModel: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é...")
        locationManager.requestLocationPermission()
    }
    
    public func centerOnUserLocation() {
        guard let userLocation = userLocation else {
            showError(TochkaError.invalidData)
            return
        }
        
        print("üìç MapViewModel: –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        
        withAnimation(.easeInOut(duration: 1.0)) {
            mapRegion = MKCoordinateRegion(
                center: userLocation,
                latitudinalMeters: 5000,
                longitudinalMeters: 5000
            )
        }
    }
    
    public func zoomIn() {
        withAnimation(.easeInOut(duration: 0.3)) {
            mapRegion.span.latitudeDelta *= 0.7
            mapRegion.span.longitudeDelta *= 0.7
        }
    }
    
    public func zoomOut() {
        withAnimation(.easeInOut(duration: 0.3)) {
            mapRegion.span.latitudeDelta *= 1.3
            mapRegion.span.longitudeDelta *= 1.3
        }
    }
    
    public func selectPlace(_ place: Place) {
        print("üè¢ MapViewModel: –í—ã–±—Ä–∞–Ω–æ –º–µ—Å—Ç–æ: \(place.name)")
        selectedPlace = place
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ
        withAnimation(.easeInOut(duration: 0.8)) {
            mapRegion.center = place.coordinate
        }
    }
    
    public func showPlaceDetails(_ place: Place) {
        selectedPlace = place
        showPlaceDetail = true
    }
    
    public func createActivityAtPlace(_ place: Place) {
        print("üéØ MapViewModel: –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –º–µ—Å—Ç–µ: \(place.name)")
        // TODO: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —ç–∫—Ä–∞–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        selectedPlace = place
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ ActivityFeature
    }
    
    public func toggleFilterSheet() {
        showFilterSheet.toggle()
    }
    
    public func searchPlaces(query: String) {
        guard !query.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else {
            loadNearbyPlaces()
            return
        }
        
        let searchLocation = userLocation ?? .rostovOnDon
        isSearching = true
        
        placesService.searchPlaces(
            query: query,
            category: selectedCategory,
            around: searchLocation
        )
    }
    
    public func loadNearbyPlaces() {
        let location = userLocation ?? .rostovOnDon
        print("üîç MapViewModel: –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º —Å \(location)")
        
        placesService.getPlacesNearby(
            location: location,
            category: selectedCategory
        )
    }
    
    // MARK: - Private Event Handlers
    
    private func handleCategoryChangeImmediate(_ category: PlaceCategory) {
        print("üè∑Ô∏è MapViewModel: –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: \(category.displayName)")
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–∞ –±–µ–∑ debounce
        if searchText.isEmpty {
            loadNearbyPlaces()
        } else {
            searchPlaces(query: searchText)
        }
    }
    
    private func handleLocationUpdate(_ location: CLLocationCoordinate2D) {
        print("üìç MapViewModel: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: \(location)")
        userLocation = location
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏
        if mapRegion.center.latitude == CLLocationCoordinate2D.rostovOnDon.latitude {
            withAnimation(.easeInOut(duration: 1.5)) {
                mapRegion = MKCoordinateRegion(
                    center: location,
                    latitudinalMeters: 10000,
                    longitudinalMeters: 10000
                )
            }
        }
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Å—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏
        loadNearbyPlaces()
    }
    
    private func handlePlacesUpdate(_ newPlaces: [Place]) {
        print("üè¢ MapViewModel: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç: \(newPlaces.count)")
        
        let limitedPlaces = Array(newPlaces.prefix(50))
        places = limitedPlaces
        
        isSearching = false
    }
    
    private func handleSearchTextChange(_ query: String) {
        print("üîç MapViewModel: –ü–æ–∏—Å–∫: '\(query)'")
        
        if query.isEmpty {
            loadNearbyPlaces()
        } else {
            searchPlaces(query: query)
        }
    }
    
    private func handleCategoryChange(_ category: PlaceCategory) {
        print("üè∑Ô∏è MapViewModel: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: \(category.displayName)")
        
        if searchText.isEmpty {
            loadNearbyPlaces()
        } else {
            searchPlaces(query: searchText)
        }
    }
    
    public func selectCategory(_ category: PlaceCategory) {
        print("üè∑Ô∏è MapViewModel: –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —á–µ—Ä–µ–∑ UI: \(category.displayName)")
        
        selectedCategory = category
    }
    
    // MARK: - Computed Properties
    
    public var isLocationAvailable: Bool {
        locationManager.isLocationAvailable
    }
    
    public var locationAuthorizationStatus: CLAuthorizationStatus {
        locationManager.authorizationStatus
    }
    
    public var placesCount: Int {
        places.count
    }
}

// MARK: - Error Handling Extension
extension MapViewModel {
    private func showError(_ error: TochkaError) {
        errorMessage = error.localizedDescription
        print("‚ùå MapViewModel: –û—à–∏–±–∫–∞ - \(error.localizedDescription)")
    }
}



